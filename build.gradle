/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/5.0/userguide/tutorial_java_projects.html
 */

buildscript {
    ext {
        springBootVersion = '2.1.3.RELEASE'
    }
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    // Apply the java plugin to add support for Java
    id 'java'
    id 'groovy'
    id 'jacoco'
    // Apply the application plugin to add support for building an application
    id 'application'
}

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenLocal()
    mavenCentral()
}

applicationDefaultJvmArgs = ["-Xmx2g", "-XX:MaxPermSize=1g", "-Xdebug",
                             "-XX:+CMSClassUnloadingEnabled",
                             "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=9081"]

dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    implementation "com.google.guava:guava:26.0-jre"
    compile "net.sf.supercsv:super-csv:2.3.1"

    compile "org.hibernate:hibernate-core:3.6.7.Final"
    compile "org.projectlombok:lombok:1.18.8"
    compile "org.codehaus.groovy:groovy-all:2.5.7"

    compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
    compile "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"

    runtimeOnly "com.h2database:h2:1.4.197"

    compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"

    compile "org.springframework.boot:spring-boot-starter-aop:${springBootVersion}"

    compile "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"

    compile "org.springframework:spring-context:4.0.2.RELEASE"
    compile "org.springframework:spring-tx:4.0.2.RELEASE"
    compile "org.springframework:spring-jdbc:4.0.2.RELEASE"
    compile "org.springframework:spring-test:4.0.2.RELEASE"
    compile "org.springframework:spring-context:4.0.2.RELEASE"
    compile "org.springframework:spring-context:4.0.2.RELEASE"

    compile "com.fasterxml.jackson.core:jackson-databind:2.4.1"

    compile "org.slf4j:slf4j-api:1.7.5"

    compile 'org.objenesis:objenesis:1.4'

    testCompile group: 'org.spockframework', name: 'spock-core', version: '1.3-groovy-2.5'
}

jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                exclude: ['au/mebank/finance/model/**'])
        })
    }
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")

    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
    }

    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    // Print coverage report
    jacoco {
        destinationFile = file("$buildDir/jacoco/test.exec")
//        classDumpFile = file("$buildDir/jacoco/classpathdumps")
    }
    finalizedBy "jacocoTestReport"
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

description = "Financial transaction tracker"

mainClassName = "au.mebank.finance.Application"